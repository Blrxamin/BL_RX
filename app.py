from flask import Flask, request, Response
import asyncio
import httpx
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
import threading

app = Flask(__name__)

# توكنات الحسابات
SPAM_TOKENS = {
  "4071882898": "714199E800B88D15FC2C49B679B9C5834891B1129BAE486A55B37A4AFF536DFB",
  "4071877506": "BB39D840E1AD3CA37906AEC9F12AA87764F985D197B6D8619401119AD1BE1EB3",
  "4071873372": "BE217BE30B4B0D3A05FAD3623E5B5BA991ACE74CAD6A89E6DCDD5284CA818CC2",
  "4071868702": "6C6AE42C49276074EBAA55BE64B21222DE661C085F3DF54C3092E293DFFF9BC7",
  "4071864811": "25D3CFA0563C971558B22D84813DAF33EAF37E448F7D5731D9A319F20F9C5325",
  "4071860879": "28FBBB311051FF03AAF8FA3DB6A55EE89EF46A5C672967B80A91DF4774EF465C",
  "4071856872": "BDA4D64A14C057735C9FB84C018BC02CF3056CF88835781E9C5C6C3F724FDF99",
  "4071849625": "0A1606944DA09DF5363C8EDC2058C0F069356E19A71ACBFC718F12D3D8EF5E4B",
  "4071845786": "484237444CDC42ECABEFAD91883A9220138F06FFA9C79C83F324EF04BAAE93C9",
  "4071841990": "B9C789E40223276B7EDD674C3E36B3E722AD824BC83E9F19F11AB5C807B90ADE",
  "4071837973": "7FCC75AD44BADF10DA836D9634998A31CFCBC0115F3EEF85279DC45136A88B7F",
  "4071827076": "B795C00AC1E75043057542F33049652C7ABEB09ACB90FEB2CD8916D877E3F748",
  "4071820456": "425E0FA633E71F4021662399EB6C328FF846A48C535FB8AD2B1B126ED08A14FE",
  "4071816513": "448F5A96054F6B02A688C955CBB760BCBB7664A9B6375C302FD4FE18E92035C7",
  "4071812435": "DB25F6789C63950753B669BF28E50681773630D4F1F70BD32A7200D2C006C532",
  "4071808625": "1FA350DB5F1979E80E6CA3AE3D3CEF5BB7C58037584DEF976DAE0F6ED1573F68",
  "4071805455": "32CEF9CDAF2F21878FECA0AFEC49131B772D6465822DA8E215B72D6BE3F57924",
  "4071802200": "CC400750A06BEE155286CEBE483F3A9E584479ADE6BFCE63B89294DD6C86FB2A",
  "4071798480": "9B3C6A6F0E2AF20D92FB7DFA9F2DCDC59404B3175FD7F84A2E3A2E2AB5D717FA",
  "4071795068": "50B14430465220B5FE9C81DF8A9F9E6F1FE77309A78BEB35F9EE9F4550CE7A56",
  "4071791492": "CCC41AA09DDCE0F3B1856451355DAB2FB323BA5AF26C81F8ADD29DA5EC55CE3B",
  "4071787936": "09CBB7D0A142A99D9A82BA07645EFEF19460EAB885DBE5B0690E127EE00D6658",
  "4071784951": "FF5B8D53E4B402F17F61D2BFD8E98D8E047DACE7E70039C3529852E68291F3FC",
  "4071781856": "EE001D89CC64F65639DDA56E01D1F54FF68F85CB6C7016B7335AA767D44E3378",
  "4071778375": "3639437D5754B57A4E632738932A120946AA350807E5048C4E417A44B7F7CC44",
  "4071774769": "3C555BFB45E70E13BACB8E8D9A68F865C26F6381C56FF9A54EA3378F72B85761",
  "4071771213": "BA3A8429CB282BA033A26F08748A55768037B2C689BFDC5753B4172EAC4FF0D6",
  "4071767944": "E109E63B5F0768A6B2A8B226007C9BBB7DF24A6E6F4BBE40172FF09BA3E72A46",
  "4071764459": "FA47E40837462F11A7526BA8ABAE3B0EBD2CA71E90BB73C243DB6728B70AF9AD",
  "4071759535": "6D146101D0B0A77CDC03A6536289B81D71E5F4BEC13012C89B730ECB5E73B361",
  "4071753009": "AF4B7C1F184D35EEA3A24DC3595932A5D653A64A1CF6D72FA21D96E16A498995",
  "4071748722": "F1C7C9D3D5F93992DA6ACE6F9CE0883C72357AB4CAA8DA7D5374E5041CF52D71",
  "4071744603": "703E81E67418B828936A6B436EF8471B340B8B07FB705B94B8C84CAF0B5C84B4",
  "4071741192": "73841780388BD4725903F3468920E8B31A85A3E5BDAE4C402CA3C14D88F40541",
  "4071737092": "5A18BE5572ECF00820CD7A01115B7927C92DF2789D35CBA2654A596311FB938A",
  "4071733290": "790E6DBB150324C65D93E47819B0A11737B797297D9D4528A7E2E4A9CAA18F8A",
  "4071726627": "8D400B35C8107A3A60E7E2110EA4E91C78658C429A949CF4E12E52344CE58D62",
  "4071723496": "1B909DD9EFF31261C1D50BB20D88677B604045A4D669081D0421508927668DF1",
  "4071719267": "D18848BE95D8610FF541F8D97F55C9D7D7DA827717C6BCD537F878D66E30EB59",
  "4071715872": "731F71D4925D43045A972F41B496AC11900550F520BC0697500C8818733AC0DD",
  "4071712906": "AB34229C65785C0CA948870D6A4E89CC2D1F3F8C937AD34FD32758E04B82BBF9",
  "4071708762": "01925F1BD540A4186D39F00F6E90B3F21F7115E2A1D2D7F5E9459101FBB7BB92",
  "4071705760": "345CF2703C8118A05E394B2643C7BA13170DA6BB77DBF1683FA973C366BD12D2",
  "4071693768": "C96184A50C7CAA7A7C9F9B15E1B06B0428F55C4A64EF2A7F55602415BCF14E48",
  "4067861031": "3E098E36CCA1C43B59C54EE36C3CD0B0D775420B96FF305100A3DE7B326F606D",
  "4067856111": "6E537690A974BB02E911A37913C0C90B8A3C89C0C24BC054358A1507DCE6D55C",
  "4067845657": "488EB7A417DBF4CBCD266A058A2A307595248EF05151EF9DA59189E6A2241392",
  "4040064404": "BFD41054F72B3830481FA2D489F1766F1606A01741E39F492AC07382D988D607",
  "4040042019": "31FD9A9D2690A58D024C866A33ABF2A4651E4DE77236570AC774AED13DF029CE",
  "4040142249": "F1B88FDFD433A71E082CC0FAABD65BF44368C3D1DEC7D1EC6FBF43DA2514D00B",
  "4040116481": "FF804F236E2CB4AA805AD3A02FC1C794303021E8970E88585AF6F76068313F12",
  "4040154077": "3BB516497CF8EF4089C5E9D318693255BC77B37337286D889906A6954DB76208",
  "4040058374": "A109324AC37DE3FC5ADC4F49B96CC7C7891E0B191EBAD8EECE10D9368856D43B",
  "4040098928": "74C5FC342F4B1F58A9DDDA0DDF22AA1A0D66EF5CEB7750641C55FEBB9A425D37",
  "4040110191": "842052B73A0B5235BD44C2A67B1B6B020404B144792FE35F001DE3AE78C288A9",
  "4040093528": "415E3C037FE37F45DA21E8247E42138259DAE84FFEB774DCE1967F8BEE720A2F",
  "4040016492": "23460861ECF5ABADEFF5897141C47F1167861AB55E9954C9D6A7FB5CA543FD03",
  "4040073266": "A027723377C3F92783158311F89912123B2D7A04139E7BF69C5B00C49E538CAB",
  "4040068822": "F28B8AFD79DF563A984F131E7B83DEDAEEE38043F95F793EAC3F7B49677F48B",
  "4040022919": "693AFC806236DFAB652FD0E3562F358557E5CCE02AEF6934AD8E05594137B3E7",
  "4040082429": "D4131B09532D6F0053BFA7138581F981BE6CE1EADB10C5BA046067EDF50E76BA",
  "4040007903": "1D8D62272393DEC90D1347571A0E315D81261128822A4EBF4F86135C01A17AFF",
  "4040147911": "66EC29F31F9C291B79F86CC3ADEBD049385A6CE77F1DA98342ACC778C87896BA",
  "4040134737": "0BD462003E3E3AFA822D997CD5406B5278557DC6DC3B6DC7EF00FF3805CCE8F0",
  "4040030407": "5F1B3549CB6701C6F156C60F0D670A5390D958EDDFA0A2FE3E38C12748345813",
  "4040087388": "EF4987A3D732F0D08135C2332387293B9581D4463103B7334111C30AF2876CB9",
  "4040161146": "AA13185CCD19792A42B0149788740ECF57F11CF8E61085440671868B797E4D35",
  "4042267664": "16015FDF5AE7CFCC95A721F43CD3536788C9EF5CBA69E5A21F4EA8047A714A57",
  "4042321865": "D7F9288A147DAADFAD4A302B425878CA5386BB0428AD139C7D8735C33332C25A",
  "4042319580": "953402F8D74F227B1CFF059D8951C165A2311471899989CA2216169C0CE3DC19",
  "4042313968": "663732200763AD4202789732F610BFD37B7B5B1F512ACFEFDA80DA619C382F56",
  "4042308481": "64690CA93D843EB73125AAEEB91ADD09744C93AB2C662746D633D1D4758F77E4",
  "4042305175": "C9211A4944044A03275A6059FD3406A7040325733D508466416F949DD451A605",
  "4042301494": "6EFC8B61FE067AF035343374AD6B6FDED7A369EEEBD9814D3B14342A92BF5BA5",
  "4042295146": "94693547B2E61BB8F3313E58F76113F6CF2E6C5A082E5223E72E1468BDA2A9DA",
  "4042291813": "F440C6136B6BA2308D779D744AB132D07184A1DABF141FCF9E6E8B6D47F22E69",
  "4042287969": "8832AB12298771D4B862E8A7AF4A9E8DD741A935DCE38F5AE2952E9A6CF9BBDF",
  "4042284655": "C5D66A53618931BD331BA9E71504BEF283BFC9DB82A53EB5D3747397B0E609C1",
  "4042281603": "EC922A04C29043C099CE488AF410B3B01793CFF661A636DCAB267C0CAB77ABBA",
  "4042278615": "102568895158EC85F59DCA0F1A30019CB976C657E221F4F47293E3A1609E946B",
  "4042274311": "06EDBF965A33D371290B7F465C2BBBB746F20F9DB192FF2EB4A5A44D19034A7E",
  "4042270990": "1656A26934920037CACEAC83D5D1F11DA900F52E44816A078CE1559DEE735850"
}

# تعريف دالة Encrypt_ID المفقودة
def Encrypt_ID(x):
    x = int(x)
    dec = ['80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff']
    xxx = ['1', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f']
    x = x / 128
    if x > 128:
        x = x / 128
        if x > 128:
            x = x / 128
            if x > 128:
                x = x / 128
                strx = int(x)
                y = (x - int(strx)) * 128
                stry = str(int(y))
                z = (y - int(stry)) * 128
                strz = str(int(z))
                n = (z - int(strz)) * 128
                strn = str(int(n))
                m = (n - int(strn)) * 128
                return dec[int(m)] + dec[int(n)] + dec[int(z)] + dec[int(y)] + xxx[int(x)]
            else:
                strx = int(x)
                y = (x - int(strx)) * 128
                stry = str(int(y))
                z = (y - int(stry)) * 128
                strz = str(int(z))
                n = (z - int(strz)) * 128
                strn = str(int(n))
                return dec[int(n)] + dec[int(z)] + dec[int(y)] + xxx[int(x)]

# وظيفة التشفير
def encrypt_api(plain_text):
    key = bytes([89, 103, 38, 116, 99, 37, 68, 69, 117, 104, 54, 37, 90, 99, 94, 56])
    iv = bytes([54, 111, 121, 90, 68, 114, 50, 50, 69, 51, 121, 99, 104, 106, 77, 37])
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(pad(bytes.fromhex(plain_text), AES.block_size)).hex()

# بقية الكود يبقى كما هو...

# وظيفة التشفير
def encrypt_api(plain_text):
    key = bytes([89, 103, 38, 116, 99, 37, 68, 69, 117, 104, 54, 37, 90, 99, 94, 56])
    iv = bytes([54, 111, 121, 90, 68, 114, 50, 50, 69, 51, 121, 99, 104, 106, 77, 37])
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return cipher.encrypt(pad(bytes.fromhex(plain_text), AES.block_size)).hex()

# جلب التوكن
async def get_jwt_async(uid, password):
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(
                f"https://jwt-gen-api-v2.onrender.com/token?uid={uid}&password={password}",
                timeout=30
            )
            if response.status_code == 200:
                return response.json().get("token")
    except:
        return None

# إرسال طلب الصداقة
async def send_friend_request(id, token):
    url = 'https://clientbp.common.ggbluefox.com/RequestAddingFriend'
    headers = {
        'X-Unity-Version': '2018.4.11f1',
        'ReleaseVersion': 'OB49',
        'Content-Type': 'application/x-www-form-urlencoded',
        'X-GA': 'v1 1',
        'Authorization': f'Bearer {token}',
        'Content-Length': '16',
        'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 7.1.2; ASUS_Z01QD Build/QKQ1.190825.002)',
        'Host': 'clientbp.ggblueshark.com',
        'Connection': 'Keep-Alive',
        'Accept-Encoding': 'gzip'
    }
    encrypted_data = encrypt_api(f'08a7c4839f1e10{Encrypt_ID(id)}1801')
    data = bytes.fromhex(encrypted_data)
    
    try:
        async with httpx.AsyncClient(verify=False, timeout=60) as client:
            response = await client.post(url, headers=headers, data=data)
            if response.status_code == 200:
                return f"تم الإرسال لـ {id}"
            return f"خطأ: {response.text}"
    except Exception as e:
        return f"فشل: {str(e)}"

# العملية الرئيسية
async def process_account(uid, pw, id):
    token = await get_jwt_async(uid, pw)
    if token:
        return await send_friend_request(id, token)
    return f"فشل جلب التوكن لـ {uid}"

async def process_all_accounts(id):
    tasks = []
    for uid, pw in SPAM_TOKENS.items():
        task = asyncio.create_task(process_account(uid, pw, id))
        tasks.append(task)
    return await asyncio.gather(*tasks)

def run_async(id):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    results = loop.run_until_complete(process_all_accounts(id))
    loop.close()
    print("النتائج:", results)

@app.route('/spam')
def spam():
    id = request.args.get('id')
    if id:
        thread = threading.Thread(target=run_async, args=(id,))
        thread.start()
        return "جاري إرسال طلبات الصداقة..."
    return "يجب إدخال ID صحيح"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8398)
